import 'dart:async';
import 'dart:convert';
import 'dart:io'; // Ajout de l'import pour SocketException
import 'package:http/http.dart' as http;
import 'package:logger/logger.dart';
import '../models/device_data.dart';
import '../models/device_command.dart';
import 'database_service.dart';
import '../config/api_config.dart';
import 'package:flutter/foundation.dart';

class ESP32Service extends ChangeNotifier {
  static final ESP32Service _instance = ESP32Service._internal();
  final _logger = Logger();
  final DatabaseService _databaseService = DatabaseService();
  DeviceData?
  _deviceData; // Peut √™tre utilis√© pour stocker les derni√®res donn√©es globales, mais attention √† l'obsolescence

  // Identifiants des appareils
  final String _maison1DeviceId = 'esp32_maison1';
  final String _maison2DeviceId = 'esp32_maison2';

  // Timers pour la synchronisation p√©riodique
  Timer? _dataFetchTimer;
  Timer? _commandCheckTimer;

  final String baseUrl = ApiConfig.baseUrl;
  final String apiKey = ApiConfig.apiKey;
  final StreamController<Map<String, dynamic>> _dataController =
      StreamController<Map<String, dynamic>>.broadcast();

  Stream<Map<String, dynamic>> get dataStream => _dataController.stream;

  factory ESP32Service() {
    return _instance;
  }

  ESP32Service._internal();

  // Getter pour acc√©der aux donn√©es du device (attention: peut √™tre obsol√®te si non mis √† jour r√©guli√®rement)
  DeviceData? get deviceData => _deviceData;

  /// Initialise le service et commence √† synchroniser les donn√©es
  Future<void> initialize() async {
    try {
      _logger.i('Initialisation du service ESP32');

      // V√©rifier la connexion avec les ESP32 avant de d√©marrer les timers
      final maison1Connected = await checkESP32Connection(_maison1DeviceId);
      final maison2Connected = await checkESP32Connection(_maison2DeviceId);

      _logger.i(
        '√âtat de la connexion ESP32',
        error: {'maison1': maison1Connected, 'maison2': maison2Connected},
      );

      // D√©marrer les timers m√™me si les ESP32 ne sont pas connect√©s
      // Ils seront r√©essay√©s p√©riodiquement
      await _startDataFetching();
      await _startCommandChecking();

      _logger.i('Service ESP32 initialis√© avec succ√®s');
    } catch (e) {
      _logger.e('Erreur lors de l\'initialisation du service ESP32', error: e);
      // Ne pas propager l'erreur pour √©viter de bloquer le d√©marrage de l'application
    }
  }

  /// D√©marre le timer de r√©cup√©ration p√©riodique des donn√©es des ESP32.
  Future<void> _startDataFetching() async {
    try {
      _dataFetchTimer?.cancel();
      _dataFetchTimer = Timer.periodic(const Duration(seconds: 5), (
        timer,
      ) async {
        try {
          await _fetchDataFromESP32();
        } catch (e) {
          _logger.e('Erreur lors de la r√©cup√©ration des donn√©es', error: e);
        }
      });
    } catch (e) {
      _logger.e(
        'Erreur lors du d√©marrage du timer de r√©cup√©ration des donn√©es',
        error: e,
      );
    }
  }

  /// D√©marre le timer de v√©rification p√©riodique des commandes en attente.
  Future<void> _startCommandChecking() async {
    try {
      _commandCheckTimer?.cancel();
      _commandCheckTimer = Timer.periodic(const Duration(seconds: 30), (
        _,
      ) async {
        try {
          await _checkPendingCommands();
        } catch (e) {
          _logger.e(
            'Erreur dans le timer de v√©rification des commandes',
            error: e,
          );
        }
      });
    } catch (e) {
      _logger.e(
        'Erreur lors du d√©marrage du timer de v√©rification des commandes',
        error: e,
      );
    }
  }

  /// R√©cup√®re les derni√®res donn√©es de chaque ESP32 et les sauvegarde.
  Future<void> _fetchDataFromESP32() async {
    try {
      // R√©cup√©rer les donn√©es pour les deux appareils
      final maison1Data = await getCurrentData(_maison1DeviceId);
      final maison2Data = await getCurrentData(_maison2DeviceId);

      if (maison1Data != null) {
        _logger.i(
          'üí° Donn√©es re√ßues pour maison1',
          error: maison1Data.toJson(),
        );
        _dataController.add(maison1Data.toJson());
        // await _databaseService.saveDeviceData(maaison1Data); // <-- LIGNE COMMENT√âE
      }

      if (maison2Data != null) {
        _logger.i(
          'üí° Donn√©es re√ßues pour maison2',
          error: maison2Data.toJson(),
        );
        _dataController.add(maison2Data.toJson());
        // await _databaseService.saveDeviceData(maison2Data); // <-- LIGNE COMMENT√âE
      }
    } catch (e) {
      _logger.e(
        '‚ùå Erreur de connexion lors du fetch des donn√©es: $e',
        error: e,
      );
      rethrow;
    }
  }

  /// V√©rifie et traite les commandes en attente pour les appareils.
  Future<void> _checkPendingCommands() async {
    try {
      _logger.i('V√©rification des commandes en attente');

      // R√©cup√©rer les commandes pour les deux devices
      final commands1 = await _databaseService.getPendingCommands(
        _maison1DeviceId,
      );
      final commands2 = await _databaseService.getPendingCommands(
        _maison2DeviceId,
      );
      final allCommands = [...commands1, ...commands2];

      _logger.i('Commandes trouv√©es', error: allCommands);

      // Traiter les commandes
      for (final command in allCommands) {
        _logger.i('Traitement de la commande', error: command.toJson());

        try {
          switch (command.commandType) {
            case 'recharge_energy':
              _logger.i(
                'Commande de recharge d\'√©nergie trait√©e (marquage ex√©cut√©)',
                error: command.toJson(),
              );
              await _executeCommand(command);
              break;

            case 'relay_control': // G√©rer le type de commande 'relay_control'
              final relayNumber = command.parameters['relay_number'] as int?;
              final status = command.parameters['status'] as bool?;

              if (relayNumber != null && status != null) {
                _logger.i(
                  'Commande relay_control trait√©e: Relais $relayNumber de ${command.deviceId} mis √† ${status ? "ON" : "OFF"}',
                  error: command.toJson(),
                );
                // L'application Flutter ne contr√¥le pas directement le relais physique.
                // Elle marque juste la commande comme ex√©cut√©e apr√®s que l'ESP32 est cens√© l'avoir trait√©e.
                await _executeCommand(command); // Marquer comme ex√©cut√©e
              } else {
                _logger.w(
                  'Commande relay_control invalide: champs manquants (relay_number ou status)',
                  error: command.toJson(),
                );
                await _executeCommand(
                  command,
                ); // Marquer comme ex√©cut√©e pour √©viter de la re-traiter
              }
              break;

            // Les cas 'toggle_relay' et 'set_relay' sont supprim√©s/comment√©s car 'relay_control' est le type canonique re√ßu.
            // Si votre backend renvoie toujours 'relay_control' pour les actions de relais, ces cas sont redondants.
            /*
            case 'toggle_relay':
              final relayNumber = command.parameters['relay_number'] as int?;
              if (relayNumber != null) {
                _logger.i('Commande toggle_relay trait√©e pour ${command.deviceId} relais $relayNumber');
                await _executeCommand(command);
              } else {
                _logger.w('Commande toggle_relay invalide: relay_number manquant', error: command.toJson());
                await _executeCommand(command);
              }
              break;

            case 'set_relay':
              final relayNumber = command.parameters['relay_number'] as int?;
              final state = command.parameters['state'] as bool?;
              if (relayNumber != null && state != null) {
                _logger.i('Commande set_relay trait√©e pour ${command.deviceId} relais $relayNumber √† $state');
                await _executeCommand(command);
              } else {
                _logger.w('Commande set_relay invalide: champs manquants (relay_number ou state)', error: command.toJson());
                await _executeCommand(command);
              }
              break;
            */

            case 'display_message':
              final message = command.parameters['message'] as String?;
              final line = command.parameters['line'] as int? ?? 0;
              if (message != null) {
                _logger.i(
                  'Traitement commande display_message: "$message" sur ligne $line pour ${command.deviceId}',
                  error: command.toJson(),
                );
                // TODO: Impl√©menter la logique pour envoyer ce message √† l'ESP32 via le backend
                // Exemple: await _databaseService.sendMessageToESP32(command.deviceId, message, line);
                await _executeCommand(
                  command,
                ); // Marque la commande comme ex√©cut√©e
              } else {
                _logger.w(
                  'Commande display_message invalide: message manquant',
                  error: command.toJson(),
                );
                await _executeCommand(command); // Marquer comme ex√©cut√©e
              }
              break;

            case 'request_data':
              _logger.i(
                'Traitement commande request_data pour ${command.deviceId}',
                error: command.toJson(),
              );
              await getCurrentData(
                command.deviceId,
              ); // Ceci est une requ√™te GET, donc c'est correct.
              await _executeCommand(
                command,
              ); // Marque la commande comme ex√©cut√©e
              break;

            default:
              _logger.w(
                'Type de commande non support√© ou traitement manquant: ${command.commandType}',
                error: command.toJson(),
              );
              await _executeCommand(command);
          }
        } catch (e) {
          _logger.e('Erreur lors du traitement de la commande', error: e);
          await _executeCommand(command);
        }
      }
    } catch (e) {
      _logger.e('Erreur lors de la v√©rification des commandes', error: e);
    }
  }

  /// Marque une commande comme ex√©cut√©e dans la base de donn√©es.
  /// Cette m√©thode est appel√©e apr√®s que la commande a √©t√© trait√©e par l'application.
  Future<void> _executeCommand(DeviceCommand command) async {
    try {
      _logger.i(
        'Marquage de la commande comme ex√©cut√©e',
        error: command.toJson(),
      );
      if (command.id != null) {
        await _databaseService.markCommandAsExecuted(command.id!);
      } else {
        _logger.w(
          'Impossible de marquer la commande comme ex√©cut√©e: ID de commande est null',
          error: command.toJson(),
        );
        // Pour la robustesse, si l'ID est null, vous pourriez envisager
        // de marquer la commande comme ex√©cut√©e d'une autre mani√®re (si votre backend le permet),
        // par exemple en utilisant device_id et timestamp comme identifiants.
        // Cependant, markCommandAsExecuted attend un int.
        // La vraie solution est que le backend fournisse un ID.
      }
    } catch (e) {
      _logger.e(
        'Erreur lors du marquage de la commande comme ex√©cut√©e',
        error: e,
      );
    }
  }

  /// Envoie une commande au backend pour qu'elle soit relay√©e √† l'ESP32.
  /// Cette m√©thode est un wrapper pour `_databaseService.saveCommand`.
  /// Elle est utilis√©e par les m√©thodes de contr√¥le direct (comme `controlRelay`).
  Future<void> sendCommandToDevice(DeviceCommand command) async {
    try {
      _logger.i(
        'Envoi de la commande √† l\'API (via DatabaseService)',
        error: command.toJson(),
      );
      // saveCommand va ins√©rer la commande dans la DB et l'envoyer au backend.
      // Si le backend r√©pond 200/201, la commande est consid√©r√©e comme "envoy√©e".
      final success = await _databaseService.saveCommand(command);
      if (!success) {
        throw Exception('√âchec de l\'envoi de la commande au backend');
      }
    } catch (e) {
      _logger.e('Erreur lors de l\'envoi de la commande √† l\'API', error: e);
      rethrow;
    }
  }

  @override
  void dispose() {
    _logger.i('Arr√™t du service ESP32');
    _dataFetchTimer?.cancel();
    _commandCheckTimer?.cancel();
    _dataController.close();
    super.dispose();
  }

  /// M√©thode publique pour contr√¥ler les relais d'une maison.
  /// Cr√©e une commande et l'envoie au backend.
  Future<void> controlRelay({
    required String maisonId,
    required int relayNumber,
    required bool status,
  }) async {
    final deviceId =
        maisonId == 'maison1' ? _maison1DeviceId : _maison2DeviceId;

    final command = DeviceCommand.relayControl(
      deviceId: deviceId,
      relayNumber: relayNumber,
      status: status,
    );

    _logger.i('Commande de contr√¥le de relais cr√©√©e', error: command.toJson());

    // Envoyer la commande au backend. saveCommand g√®re l'insertion et l'envoi HTTP.
    try {
      final success = await _databaseService.saveCommand(command);
      if (success) {
        _logger.i(
          'Commande de relais envoy√©e avec succ√®s au backend',
          error: command.toJson(),
        );
        // La commande sera marqu√©e comme ex√©cut√©e par _checkPendingCommands une fois qu'elle est r√©cup√©r√©e avec un ID valide.
      } else {
        _logger.w(
          '√âchec de l\'envoi imm√©diat de la commande de relais. Sera r√©essay√© par _checkPendingCommands.',
          error: command.toJson(),
        );
      }
    } catch (e) {
      _logger.e(
        'Erreur lors de l\'envoi imm√©diat de la commande de relais. Sera r√©essay√© par _checkPendingCommands.',
        error: e,
      );
    }
  }

  /// M√©thode publique pour recharger l'√©nergie d'une maison.
  /// Cr√©e une commande de recharge et l'envoie au backend.
  Future<void> rechargeEnergy({
    required String maisonId,
    required double energyAmount,
  }) async {
    try {
      _logger.i(
        'D√©but de la recharge d\'√©nergie',
        error: {'maisonId': maisonId, 'energyAmount': energyAmount},
      );

      // V√©rifications de s√©curit√©
      if (energyAmount <= 0) {
        _logger.w('Montant de recharge invalide', error: energyAmount);
        throw Exception('Le montant de recharge doit √™tre sup√©rieur √† 0');
      }

      if (energyAmount > 100) {
        _logger.w('Montant de recharge trop √©lev√©', error: energyAmount);
        throw Exception('Le montant de recharge ne peut pas d√©passer 100 kWh');
      }

      // Construire le deviceId
      final deviceId =
          maisonId == 'maison1' ? _maison1DeviceId : _maison2DeviceId;

      // V√©rifier la connexion avant d'envoyer la commande
      final isConnected = await checkESP32Connection(deviceId);
      if (!isConnected) {
        _logger.w('ESP32 non connect√©', error: deviceId);
        // On ne l√®ve pas d'exception ici si on veut que la commande soit sauvegard√©e
        // et potentiellement r√©essay√©e par le backend ou par le timer.
        // Si vous voulez bloquer l'action utilisateur, vous pouvez throw ici.
      }

      // Cr√©er la commande de recharge
      final command = DeviceCommand.rechargeEnergy(
        deviceId: deviceId,
        energyAmount: energyAmount,
      );

      _logger.i('Commande de recharge cr√©√©e', error: command.toJson());

      bool success = false;
      int retryCount = 0;
      const maxRetries = 3;

      while (!success && retryCount < maxRetries) {
        try {
          // saveCommand va ins√©rer la commande dans la DB et l'envoyer au backend.
          // Si le backend r√©pond 200/201, la commande est consid√©r√©e comme "envoy√©e".
          success = await _databaseService.saveCommand(command);
          if (success) {
            _logger.i('Commande de recharge envoy√©e avec succ√®s au backend');

            // La commande sera marqu√©e comme ex√©cut√©e par `_checkPendingCommands` une fois qu'elle est r√©cup√©r√©e avec un ID valide.

            final rechargeVerified = await verifyRechargeStatus(
              deviceId,
              energyAmount,
            );

            if (!rechargeVerified) {
              _logger.w('La recharge n\'a pas √©t√© confirm√©e par l\'ESP32');
              throw Exception('La recharge n\'a pas √©t√© confirm√©e');
            } else {
              _logger.i('Recharge d\'√©nergie v√©rifi√©e avec succ√®s');
            }
          }
        } catch (e) {
          retryCount++;
          if (retryCount < maxRetries) {
            _logger.w(
              'Tentative de recharge √©chou√©e, nouvelle tentative',
              error: {'tentative': retryCount, 'erreur': e},
            );
            await Future.delayed(const Duration(seconds: 1));
          } else {
            throw Exception(
              '√âchec de la recharge apr√®s $maxRetries tentatives: $e',
            );
          }
        }
      }

      if (!success) {
        throw Exception('√âchec de l\'envoi de la commande de recharge');
      }
    } catch (e) {
      _logger.e('Erreur lors de la recharge d\'√©nergie', error: e);
      throw Exception('Erreur lors de la recharge d\'√©nergie: $e');
    }
  }

  /// R√©cup√®re les donn√©es actuelles d'un appareil ESP32.
  Future<DeviceData?> getCurrentData(String deviceId) async {
    try {
      final url = Uri.parse('$baseUrl/api/data/$deviceId/latest');
      _logger.i('Requ√™te des donn√©es pour $deviceId', error: url.toString());

      final response = await http
          .get(url, headers: {'x-api-key': apiKey})
          .timeout(Duration(milliseconds: ApiConfig.timeout));

      _logger.i(
        'R√©ponse re√ßue',
        error: {'statusCode': response.statusCode, 'body': response.body},
      );

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        _logger.i('Donn√©es d√©cod√©es', error: data);

        if (data is Map<String, dynamic>) {
          if (data.containsKey('error')) {
            _logger.w('Erreur API: ${data['error']}');
            return _createDefaultDeviceData(deviceId);
          }

          final requiredFields = [
            'voltage',
            'current1',
            'current2',
            'energy1',
            'energy2',
          ];
          final missingFields =
              requiredFields
                  .where(
                    (field) => !data.containsKey(field) || data[field] == null,
                  )
                  .toList();

          if (missingFields.isNotEmpty) {
            _logger.w('Champs manquants ou nuls: ${missingFields.join(", ")}');
            return _createDefaultDeviceData(deviceId);
          }

          final safeData = <String, dynamic>{
            'deviceId': data['device_id']?.toString() ?? deviceId,
            'voltage':
                data['voltage'] is num
                    ? (data['voltage'] as num).toDouble()
                    : 0.0,
            'current1':
                data['current1'] is num
                    ? (data['current1'] as num).toDouble()
                    : 0.0,
            'current2':
                data['current2'] is num
                    ? (data['current2'] as num).toDouble()
                    : 0.0,
            'energy1':
                data['energy1'] is num
                    ? (data['energy1'] as num).toDouble()
                    : 0.0,
            'energy2':
                data['energy2'] is num
                    ? (data['energy2'] as num).toDouble()
                    : 0.0,
            'relay1Status':
                data['relay1_status'] is bool
                    ? data['relay1_status'] as bool
                    : false,
            'relay2Status':
                data['relay2_status'] is bool
                    ? data['relay2_status'] as bool
                    : false,
            'timestamp':
                data['created_at']?.toString() ??
                DateTime.now().toIso8601String(),
          };

          _logger.i('Donn√©es s√©curis√©es', error: safeData);
          final deviceData = DeviceData.fromJson(safeData);
          _logger.i('DeviceData cr√©√©', error: deviceData.toJson());
          return deviceData;
        }
        _logger.w('Format de donn√©es invalide');
        return _createDefaultDeviceData(deviceId);
      } else if (response.statusCode == 404) {
        _logger.i('Aucune donn√©e trouv√©e pour $deviceId');
        return _createDefaultDeviceData(deviceId);
      } else {
        _logger.e(
          'Erreur lors de la r√©cup√©ration des donn√©es',
          error: response.body,
        );
        return _createDefaultDeviceData(deviceId);
      }
    } catch (e) {
      _logger.e('Erreur lors de la communication avec l\'ESP32', error: e);
      return _createDefaultDeviceData(deviceId);
    }
  }

  /// M√©thode utilitaire pour cr√©er des donn√©es par d√©faut.
  DeviceData _createDefaultDeviceData(String deviceId) {
    return DeviceData(
      deviceId: deviceId,
      voltage: 0.0,
      current1: 0.0,
      current2: 0.0,
      energy1: 0.0,
      energy2: 0.0,
      relay1Status: false,
      relay2Status: false,
      timestamp: DateTime.now(),
    );
  }

  /// V√©rifie si la recharge d'√©nergie a √©t√© confirm√©e par l'appareil.
  Future<bool> verifyRechargeStatus(
    String deviceId,
    double expectedEnergy,
  ) async {
    try {
      // Faire 5 tentatives avec un d√©lai de 1 seconde
      for (int i = 0; i < 5; i++) {
        final data = await getCurrentData(deviceId);
        if (data != null) {
          final currentEnergy =
              deviceId == _maison1DeviceId ? data.energy1 : data.energy2;
          _logger.i(
            'V√©rification de la recharge (tentative ${i + 1})',
            error: {
              'deviceId': deviceId,
              'expectedEnergy': expectedEnergy,
              'currentEnergy': currentEnergy,
            },
          );

          // Accepter une marge d'erreur de 0.1 kWh
          if (currentEnergy >= expectedEnergy - 0.1) {
            _logger.i('Recharge v√©rifi√©e avec succ√®s');
            return true;
          }
        }
        // Attendre 1 seconde entre chaque tentative
        await Future.delayed(const Duration(seconds: 1));
      }

      _logger.w(
        'La recharge n\'a pas √©t√© confirm√©e apr√®s plusieurs tentatives',
      );
      return false;
    } catch (e) {
      _logger.e('Erreur lors de la v√©rification de la recharge', error: e);
      return false;
    }
  }

  /// V√©rifie la connectivit√© d'un ESP32 en interrogeant son endpoint de derni√®res donn√©es.
  Future<bool> checkESP32Connection(String deviceId) async {
    try {
      final url = Uri.parse('$baseUrl/api/data/$deviceId/latest');
      _logger.i('Tentative de connexion √†:', error: url.toString());

      final client = http.Client();
      try {
        final response = await client
            .get(url, headers: {'x-api-key': apiKey})
            .timeout(Duration(milliseconds: ApiConfig.timeout));

        _logger.i(
          'R√©ponse du serveur:',
          error: {
            'statusCode': response.statusCode,
            'body': response.body,
            'headers': response.headers,
          },
        );

        return response.statusCode == 200;
      } finally {
        client.close();
      }
    } on TimeoutException {
      _logger.e('Timeout lors de la connexion au serveur');
      return false;
    } on SocketException catch (e) {
      _logger.e('Erreur de connexion au serveur:', error: e.message);
      return false;
    } catch (e) {
      _logger.e(
        'Erreur lors de la v√©rification de la connexion ESP32',
        error: e,
      );
      return false;
    }
  }

  /// Attend une r√©ponse d'un ESP32 avec un nombre maximal de tentatives.
  Future<void> waitForESP32Response(
    String deviceId, {
    int maxAttempts = 3,
  }) async {
    for (int i = 0; i < maxAttempts; i++) {
      if (await checkESP32Connection(deviceId)) {
        return;
      }
      await Future.delayed(const Duration(seconds: 1));
    }
    throw Exception('L\'ESP32 ne r√©pond pas apr√®s $maxAttempts tentatives');
  }

  /// Bascule l'√©tat d'un relais pour un appareil donn√©.
  Future<void> _toggleRelay(String deviceId, int relayNumber) async {
    try {
      // R√©cup√©rer l'√©tat actuel du relais pour l'appareil sp√©cifique
      final currentData = await getCurrentData(deviceId);
      bool currentState = false;
      if (currentData != null) {
        currentState =
            (relayNumber == 1)
                ? currentData.relay1Status
                : currentData.relay2Status;
      } else {
        _logger.w(
          'Impossible de r√©cup√©rer l\'√©tat actuel du relais pour $deviceId. Assumons OFF.',
          error: {'deviceId': deviceId, 'relayNumber': relayNumber},
        );
      }

      // D√©finir le nouvel √©tat du relais
      await _setRelay(deviceId, relayNumber, !currentState);
      _logger.i(
        'Relais $relayNumber de $deviceId bascul√© avec succ√®s.',
        error: {'newState': !currentState},
      );
    } catch (e) {
      _logger.e('Erreur lors du basculement du relais', error: e);
      rethrow;
    }
  }

  /// D√©finit l'√©tat d'un relais sp√©cifique pour un appareil donn√©.
  Future<void> _setRelay(String deviceId, int relayNumber, bool state) async {
    try {
      final command = DeviceCommand.relayControl(
        deviceId: deviceId, // Utilise le deviceId dynamique
        relayNumber: relayNumber,
        status: state,
      );
      _logger.i(
        'Envoi de la commande set_relay pour $deviceId relais $relayNumber √† $state',
        error: command.toJson(),
      );
      // Cette m√©thode appelle sendCommandToDevice, qui √† son tour appelle _databaseService.saveCommand.
      await sendCommandToDevice(command);
    } catch (e) {
      _logger.e('Erreur lors de la d√©finition de l\'√©tat du relais', error: e);
      rethrow;
    }
  }
}
